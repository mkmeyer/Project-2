---
title: "API Practice"
format: pdf
editor: visual
---

```{r setup}
rm(list=ls())

#Loading required packages
library("tidyverse")
library("jsonlite")
library("httr")
library("ggplot2")
library("lubridate")
library("anytime")

msleep <- ggplot2::msleep
```

```{r}
#Standings per team and season
url <- "https://api-nba-v1.p.rapidapi.com/standings"

queryString <- list(
	league = "standard",
	season = "2021",
	team = "1"
)

response <- VERB("GET", url, query = queryString, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), content_type("application/octet-stream"))

parsed_nba_info <- fromJSON(rawToChar(response$content))
standings_data <- as_tibble(parsed_nba_info$response) #pulling response
standings_data

#write.csv(standings_data, "standings_data.csv")
```

```{r}
season <- "2021"
team <- "1"
key <- "9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec"

url <- paste0("https://api-nba-v1.p.rapidapi.com/standings?league=standard", #base of URL
               "&season=", season, #adding season to URL
               "&team=", team #adding team to URL
              )

pacers_info <- httr::GET(url, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), content_type("application/octet-stream"))
pacers_info
```

```{r}
standings_query <- function(season, team){
  url <- paste0("https://api-nba-v1.p.rapidapi.com/standings?league=standard", #base of URL
                "&season=", season, #adding season to URL
                "&team=", team #adding team to URL
                )
  
  response <- httr::GET(url, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 
                                         'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), 
                        content_type("application/octet-stream"))
  
  parsed_nba_info <- fromJSON(rawToChar(response$content))
  standings_data <- as_tibble(parsed_nba_info$response) #pulling response
  return(standings_data)
}

standings_data <- standings_query(2020, 5)
```

```{r}
#Players per team and season
url <- "https://api-nba-v1.p.rapidapi.com/players"

queryString <- list(
	team = "1",
	season = "2021"
)

response <- VERB("GET", url, query = queryString, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), content_type("application/octet-stream"))

parsed_nba_info <- fromJSON(rawToChar(response$content))
players_data <- as_tibble(parsed_nba_info$response) #pulling response
players_data

#write.csv(players_data, "players_data.csv")
```

```{r}
players_query <- function(season, team){
  url <- paste0("https://api-nba-v1.p.rapidapi.com/players?", #base of URL
                "&season=", season, #adding season to URL
                "&team=", team #adding team to URL
                )
  
  response <- httr::GET(url, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 
                                         'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), 
                        content_type("application/octet-stream"))
  
  parsed_nba_info <- fromJSON(rawToChar(response$content))
  players_data <- as_tibble(parsed_nba_info$response) #pulling response
  return(players_data)
}

players_data1 <- players_query(2020, 5)

players_data <- players_data1[(!is.na(players_data1$height$meters)), ]

players_data$height_meters <- as.numeric(players_data$height$meters)

players_data$weight_pounds <- as.numeric(players_data$weight$pounds)

players_data$leagues_standard_pos <- players_data$leagues$standard$pos

players_data$birth_country <- players_data$birth$country
```

```{r}
#Player statistics per player and season
url <- "https://api-nba-v1.p.rapidapi.com/players/statistics"

queryString <- list(
	id = "236",
	season = "2020"
)

response <- VERB("GET", url, query = queryString, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), content_type("application/octet-stream"))

parsed_nba_info <- fromJSON(rawToChar(response$content))
player_stat_data <- as_tibble(parsed_nba_info$response) #pulling response
player_stat_data

#write.csv(player_stat_data, "player_stat_data.csv")
```

```{r}
players_stats_query <- function(season, player){
  url <- paste0("https://api-nba-v1.p.rapidapi.com/players/statistics?", #base of URL
                "&season=", season, #adding season to URL
                "&id=", player #adding team to URL
                )
  
  response <- httr::GET(url, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 
                                         'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), 
                        content_type("application/octet-stream"))
  
  parsed_nba_info <- fromJSON(rawToChar(response$content))
  players_stats_data <- as_tibble(parsed_nba_info$response) #pulling response
  return(players_stats_data)
}

players_stats_data <- players_stats_query(2020, 236)

players_stats_data$team_code <- players_stats_data$team$code

players_stats_data$first_name <- players_stats_data$player$firstname

players_stats_data$last_name <- players_stats_data$player$lastname

players_stats_data$min1 <- strptime(players_stats_data$min, format = "%M:%S")

players_stats_data$minutes1 <- round_date(players_stats_data$min1, unit = "1 minute")
players_stats_data$minutes <- minute(players_stats_data$minutes1)
```

```{r}
#Player statistics per team and season
url <- "https://api-nba-v1.p.rapidapi.com/players/statistics"

queryString <- list(
	team = "1",
	season = "2020"
)

response <- VERB("GET", url, query = queryString, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), content_type("application/octet-stream"))

parsed_nba_info <- fromJSON(rawToChar(response$content))
team_data <- as_tibble(parsed_nba_info$response) #pulling response
team_data

#write.csv(team_data, "team_data.csv")
```

### Question 3: Writing a Function to Query the API

```{r}
api_query <- function(subject, time, key){
  url = paste0("https://newsapi.org/v2/everything?q=", #base of URL
               subject, #adding subject to URL
               "&from=", time, #adding time to URL
               "&apiKey=", key) #adding API key to URL
  subject_info <- httr::GET(url) #extracting news info
  parsed_subject_info <- fromJSON(rawToChar(subject_info$content)) #parsing content of news
  subject_data <- as_tibble(parsed_subject_info$articles) #pulling articles
  return(subject_data)
}
```

PLANNING

About tab

Data Download tab

Data Exploration tab

-   one tab that displays overall team statistics by year

    -   requires team and season input (categorical variables) -

    -   displays:

        -   table of overall win/loss record, (standings_data)

            -   pie chart

        -   table of players that scored the most points, (team_data but needs cleaning)

            -   bar plot

        -   table of positions that scored the most points, (team_data but needs cleaning)

            -   scatterplot of points by position

            -   scatterplot of rebounds by position

        -   image of the logo of the team (standings_data)

-   one tab that shows players by year

    -   requires player and season input

    -   displays:

        -   comparing their scoring by position (player_stat_data)

        -   displaying points, assists, and rebounds (player_stat_data)

```{r}
  
  #create plot
  output$playersPlot <- renderPlot({
    #get data
    playersData <- getData()
    
    #base plotting object
    g <- ggplot(playersData, aes(x = height$meters, y = weight$pounds))
    
    if (input$birth$country) {
      g + geom_point(size = input$size, aes(col = birth$country))
    } else {
      g + geom_point(size = input$size)
    }
  })
  
  #create text info
  output$info <- renderText({
    #get data
    playersData <- getData()
    
    #paste info out
    paste("The average body weight for leagues$standard$pos", input$leagues$standard$pos, "is", round(mean(playersData$height$meters, na.rm = TRUE), 2), "and the average total sleep time is", round(mean(playersData$weight$pounds, na.rm = TRUE), 2), sep = " ")
    
  })
  
```
