---
title: "API Practice"
format: pdf
editor: visual
---

```{r setup}
rm(list=ls())

#Loading required packages
library("tidyverse")
library("jsonlite")
library("httr")
```


```{r}
#Reading in saved data 
#nba_data <- read.csv("nba_data.csv")
```


### Question 1: Using `GET` from the `httr` Package to Pull News Info

```{r, warning=FALSE, message=FALSE}
#Loading required packages
library("httr")

#Using httr::GET to collect information about the nba in the news
nba_info <- httr::GET("https://v2.nba.api-sports.io/everything?x-rapidapi-key=9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec")
nba_info
```

```{r}
url <- "https://api-nba-v1.p.rapidapi.com/players/statistics"
# game = "8133"
queryString <- list(game = "8133")

response <- VERB("GET", url, query = queryString, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), content_type("application/octet-stream"))

response <- httr::GET(url, 
                      add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 
                                  'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'),
                      content_type("application/octet-stream"))

content(response, "text")

# use this link to see R code for API queries: https://rapidapi.com/api-sports/api/api-nba
# could also try accessing data from Basketball Reference? mentioned in CSAS powerpoint
```

```{r}
#Standings per team and season
url <- "https://api-nba-v1.p.rapidapi.com/standings"

queryString <- list(
	league = "standard",
	season = "2021",
	team = "1"
)

response <- VERB("GET", url, query = queryString, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), content_type("application/octet-stream"))
```


```{r}
#Parsing the news information about the nba
parsed_nba_info <- fromJSON(rawToChar(response$content))
standings_data <- as_tibble(parsed_nba_info$response) #pulling response
standings_data

#write.csv(standings_data, "standings_data.csv")
```


```{r}
#Players per team and season
url <- "https://api-nba-v1.p.rapidapi.com/players"

queryString <- list(
	team = "1",
	season = "2021"
)

response <- VERB("GET", url, query = queryString, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), content_type("application/octet-stream"))
```


```{r}
#Parsing the news information about the nba
parsed_nba_info <- fromJSON(rawToChar(response$content))
players_data <- as_tibble(parsed_nba_info$response) #pulling response
players_data

#write.csv(players_data, "players_data.csv")
```

```{r}
#Player statistics per player and season
url <- "https://api-nba-v1.p.rapidapi.com/players/statistics"

queryString <- list(
	id = "236",
	season = "2020"
)

response <- VERB("GET", url, query = queryString, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), content_type("application/octet-stream"))
```

```{r}
#Parsing the news information about the nba
parsed_nba_info <- fromJSON(rawToChar(response$content))
player_stat_data <- as_tibble(parsed_nba_info$response) #pulling response
player_stat_data

#write.csv(player_stat_data, "player_stat_data.csv")
```

```{r}
#Player statistics per team and season
url <- "https://api-nba-v1.p.rapidapi.com/players/statistics"

queryString <- list(
	team = "1",
	season = "2020"
)

response <- VERB("GET", url, query = queryString, add_headers('x-rapidapi-key' = '9086777ffcmsh8e20ab7c07d978ep14073cjsndbf0615eb5ec', 'x-rapidapi-host' = 'api-nba-v1.p.rapidapi.com'), content_type("application/octet-stream"))
```

```{r}
#Parsing the news information about the nba
parsed_nba_info <- fromJSON(rawToChar(response$content))
team_data <- as_tibble(parsed_nba_info$response) #pulling response
team_data

#write.csv(team_data, "team_data.csv")
```


### Question 3: Writing a Function to Query the API

```{r}
api_query <- function(subject, time, key){
  url = paste0("https://newsapi.org/v2/everything?q=", #base of URL
               subject, #adding subject to URL
               "&from=", time, #adding time to URL
               "&apiKey=", key) #adding API key to URL
  subject_info <- httr::GET(url) #extracting news info
  parsed_subject_info <- fromJSON(rawToChar(subject_info$content)) #parsing content of news
  subject_data <- as_tibble(parsed_subject_info$articles) #pulling articles
  return(subject_data)
}
```


PLANNING

About tab

Data Download tab

Data Exploration tab

one tab that displays overall team statistics by year 
- requires team and season input (categorical variables)
- displays: table of overall win/loss record, table of players that scored the most points, table of positions that scored the most points, image of the logo of the team

one tab that shows players over time
- requires player input
- graph of scoring over time with linear projection for the future (?)
- graph of where on the basketball court they like to shoot
